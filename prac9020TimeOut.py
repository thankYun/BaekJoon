# 문제
# 1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

# 골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

# 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.

# 출력
# 각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.

#일단 소수 리스트를 생성했다.
K=[]
for i in range(2,10001):        #2부터 10000까지 K에 넣기
    K.append(i)

    #정순으로 항목을 제거하면 제거된 항목 때문에 다음 항목을 불러올 때 영향을 준다. 
    #예를 들어 EX= [1, 2, 3, 4, 5] 에서 EX[0] 을 삭제하면 다음에 시도될 EX[1]은 3이 되어버린다. 2를 건너뛰게 되는 셈.
for i in range(len(K)-1, 0, -1):         
    for j in range(2, int(K[i]**0.5)+1):
        #36같은 경우 2:18, 3:12, 4:9, 6:6 방식으로 쌍을 이루어 약수가 전개되는데, 2가 이미 나온 순간 18으로 나눔을 확인 할 필요가 없다. 6으로 나눈 이후부터는 
        #더 이상 진행할 필요가 없다.
        
        if (K[i])%j==0:
            K.pop(i)
            break

#여기서부터 입력값을 받자
T=int(input())
ListA=[]                                 
for i in range(T):                                      #리스트 0번부터 T번까지 반복
    ListA.append(int(input()))                          
    CK_min=[]                                           #임의 리스트 CKmin 생성
    for j in range(int(len(K))):                        #K 길이까지 반복
        if ListA[i]-K[j] in K:                          #주어진 정수-소수=소수일  때
            if ListA[i]-K[j]*2 >= 0:                    #주어진 정수-2*소수가 양수일 때 // 두 소수의 차이가 양수일 때
                CK_min.append(ListA[i]-K[j]*2)          #CK min을 생성한다. CK min의 길이를 통해 우리가 원하는 소수가 몇 번째에 있는지 알 수 있다.
    # print(K[len(CK_min)-1])
    print(K[len(CK_min)],ListA[i]-K[len(CK_min)])       #소수와, 주어진 정수-소수를 프린트한다.