# 알파벳 소문자, 대문자, 숫자 0-9중 하나가 주어졌을 때, 주어진 글자의 아스키 코드값을 출력하는 프로그램을 작성하시오.

# 입력
# 알파벳 소문자, 대문자, 숫자 0-9 중 하나가 첫째 줄에 주어진다.

# 출력
# 입력으로 주어진 글자의 아스키 코드 값을 출력한다.

#입력                                           출력
#A                                              65
#C                                              67
#0                                              48
#9                                              57 등이다.
#a                                              97
#z                                              122
#검색 전 1차 추론
#A 와 C가 2 차이이다. 16진법처럼 알파벳 순서를 대입하여 사용될 수 있다.
#0과 9가 9차이로 10진수 뺄셈과 같다. 아라비아 숫자의 순서 역시 유지되는 것 같다.
#소문자 역시 알파벳 총 26개, a가 1번째,z가 26번째이기에 순서 알고리즘은 전체적으로 유지된다.


# 하지만 주어진 예제만으론 대문자 A 와 0 사이에 무엇이 있는지 알 수가 없어 링크를 참고하였다.
# https://m.blog.naver.com/ycpiglet/222146759413 
## 아스키는 33개의 출력 불가능한 제어 문자들과 공백을 비롯한 95개의 출력 가능한 문자들로 000(0x00)부터 127(0x7F)까지 총 128개로 이루어진다는 것을 알 수 있었다.
##(00번부터 31번까지 32개의 문자와 127번 DEL은 사용이 안 되는 듯 하다.)
#또한 궁금했던 알파벳 사이의 번호에는 [ \ } 등 특수기호가 포함된 것을 확인하였다.
#이걸 다 대입하라고? 문제의 의도가 다를 거 같아서 찾아보니 아뿔싸! 역시 코드가 정해져 있었다. 
#chr(아스키코드 번호) 함수를 통해 코드를 출력할 수 있고
#ord("아스키코드") 함수를 통해 아스키코드의 번호를 출력할 수 있다.


print(ord(input()))

#로 끝난다.

#아스키 코드에 대해 추가로 알아보자
#아스키 코드는 1차적으로(추가 특수문자와 유럽어 제외) 0번부터 127번까지 128개의 갯수로 구성되어 있다.
#이는 2의 7승, 즉 2진법 1111111(127의 2진법)까지 표현할 수 있는 숫자이며 0.5byte내로 모든 것을 다 처리할 수 있다. 1byte (1byte=8bit)
#또한 위에서 말한 추가 특수문자와 유럽어 128개를 더하면 1byte 내로 모든 기호를 표기할 수 있다.

# 예를 들어 키보드에서 'B'를 누르면, 컴퓨터에는 특정 전압이 전달되고, 이 전압을 bit로 표현하면 1000010과 같다. 

# 이 비트값을 대문자 'B'에 해당하는 ASCII 값인 66(0x42)로 변환한다. 

# 이렇게 변환한 디지털신호는 데이터버스를 통해 컴퓨터로 전달되고, 화면에 그려주는 것이다. 

# 문자 'B'로 출력할지 숫자 66(0x42)로 출력할지는 프로그래머의 요청에 따라 처리한다.